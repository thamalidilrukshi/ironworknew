{"ast":null,"code":"import _objectSpread from \"C:/xampp/htdocs/iron iron/iron_work/simply-clone/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/xampp/htdocs/iron iron/iron_work/simply-clone/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"autoplay\", \"delay\", \"type\", \"repeat\", \"repeatDelay\", \"repeatType\"];\nimport { time } from '../../frameloop/sync-time.mjs';\nimport { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\nimport { canAnimate } from './utils/can-animate.mjs';\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\n\n/**\r\n * Maximum time allowed between an animation being created and it being\r\n * resolved for us to use the latter as the start time.\r\n *\r\n * This is to ensure that while we prefer to \"start\" an animation as soon\r\n * as it's triggered, we also want to avoid a visual jump if there's a big delay\r\n * between these two moments.\r\n */\nconst MAX_RESOLVE_DELAY = 40;\nclass BaseAnimation {\n  constructor(_ref) {\n    let {\n        autoplay = true,\n        delay = 0,\n        type = \"keyframes\",\n        repeat = 0,\n        repeatDelay = 0,\n        repeatType = \"loop\"\n      } = _ref,\n      options = _objectWithoutProperties(_ref, _excluded);\n    // Track whether the animation has been stopped. Stopped animations won't restart.\n    this.isStopped = false;\n    this.hasAttemptedResolve = false;\n    this.createdAt = time.now();\n    this.options = _objectSpread({\n      autoplay,\n      delay,\n      type,\n      repeat,\n      repeatDelay,\n      repeatType\n    }, options);\n    this.updateFinishedPromise();\n  }\n  /**\r\n   * This method uses the createdAt and resolvedAt to calculate the\r\n   * animation startTime. *Ideally*, we would use the createdAt time as t=0\r\n   * as the following frame would then be the first frame of the animation in\r\n   * progress, which would feel snappier.\r\n   *\r\n   * However, if there's a delay (main thread work) between the creation of\r\n   * the animation and the first commited frame, we prefer to use resolvedAt\r\n   * to avoid a sudden jump into the animation.\r\n   */\n  calcStartTime() {\n    if (!this.resolvedAt) return this.createdAt;\n    return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY ? this.resolvedAt : this.createdAt;\n  }\n  /**\r\n   * A getter for resolved data. If keyframes are not yet resolved, accessing\r\n   * this.resolved will synchronously flush all pending keyframe resolvers.\r\n   * This is a deoptimisation, but at its worst still batches read/writes.\r\n   */\n  get resolved() {\n    if (!this._resolved && !this.hasAttemptedResolve) {\n      flushKeyframeResolvers();\n    }\n    return this._resolved;\n  }\n  /**\r\n   * A method to be called when the keyframes resolver completes. This method\r\n   * will check if its possible to run the animation and, if not, skip it.\r\n   * Otherwise, it will call initPlayback on the implementing class.\r\n   */\n  onKeyframesResolved(keyframes, finalKeyframe) {\n    this.resolvedAt = time.now();\n    this.hasAttemptedResolve = true;\n    const {\n      name,\n      type,\n      velocity,\n      delay,\n      onComplete,\n      onUpdate,\n      isGenerator\n    } = this.options;\n    /**\r\n     * If we can't animate this value with the resolved keyframes\r\n     * then we should complete it immediately.\r\n     */\n    if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\n      // Finish immediately\n      if (instantAnimationState.current || !delay) {\n        onUpdate && onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\n        onComplete && onComplete();\n        this.resolveFinishedPromise();\n        return;\n      }\n      // Finish after a delay\n      else {\n        this.options.duration = 0;\n      }\n    }\n    const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\n    if (resolvedAnimation === false) return;\n    this._resolved = _objectSpread({\n      keyframes,\n      finalKeyframe\n    }, resolvedAnimation);\n    this.onPostResolved();\n  }\n  onPostResolved() {}\n  /**\r\n   * Allows the returned animation to be awaited or promise-chained. Currently\r\n   * resolves when the animation finishes at all but in a future update could/should\r\n   * reject if its cancels.\r\n   */\n  then(resolve, reject) {\n    return this.currentFinishedPromise.then(resolve, reject);\n  }\n  flatten() {\n    this.options.type = \"keyframes\";\n    this.options.ease = \"linear\";\n  }\n  updateFinishedPromise() {\n    this.currentFinishedPromise = new Promise(resolve => {\n      this.resolveFinishedPromise = resolve;\n    });\n  }\n}\nexport { BaseAnimation };","map":{"version":3,"names":["time","flushKeyframeResolvers","instantAnimationState","canAnimate","getFinalKeyframe","MAX_RESOLVE_DELAY","BaseAnimation","constructor","_ref","autoplay","delay","type","repeat","repeatDelay","repeatType","options","_objectWithoutProperties","_excluded","isStopped","hasAttemptedResolve","createdAt","now","_objectSpread","updateFinishedPromise","calcStartTime","resolvedAt","resolved","_resolved","onKeyframesResolved","keyframes","finalKeyframe","name","velocity","onComplete","onUpdate","isGenerator","current","resolveFinishedPromise","duration","resolvedAnimation","initPlayback","onPostResolved","then","resolve","reject","currentFinishedPromise","flatten","ease","Promise"],"sources":["C:/xampp/htdocs/iron iron/iron_work/simply-clone/frontend/node_modules/framer-motion/dist/es/animation/animators/BaseAnimation.mjs"],"sourcesContent":["import { time } from '../../frameloop/sync-time.mjs';\r\nimport { flushKeyframeResolvers } from '../../render/utils/KeyframesResolver.mjs';\r\nimport { instantAnimationState } from '../../utils/use-instant-transition-state.mjs';\r\nimport { canAnimate } from './utils/can-animate.mjs';\r\nimport { getFinalKeyframe } from './waapi/utils/get-final-keyframe.mjs';\r\n\r\n/**\r\n * Maximum time allowed between an animation being created and it being\r\n * resolved for us to use the latter as the start time.\r\n *\r\n * This is to ensure that while we prefer to \"start\" an animation as soon\r\n * as it's triggered, we also want to avoid a visual jump if there's a big delay\r\n * between these two moments.\r\n */\r\nconst MAX_RESOLVE_DELAY = 40;\r\nclass BaseAnimation {\r\n    constructor({ autoplay = true, delay = 0, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", ...options }) {\r\n        // Track whether the animation has been stopped. Stopped animations won't restart.\r\n        this.isStopped = false;\r\n        this.hasAttemptedResolve = false;\r\n        this.createdAt = time.now();\r\n        this.options = {\r\n            autoplay,\r\n            delay,\r\n            type,\r\n            repeat,\r\n            repeatDelay,\r\n            repeatType,\r\n            ...options,\r\n        };\r\n        this.updateFinishedPromise();\r\n    }\r\n    /**\r\n     * This method uses the createdAt and resolvedAt to calculate the\r\n     * animation startTime. *Ideally*, we would use the createdAt time as t=0\r\n     * as the following frame would then be the first frame of the animation in\r\n     * progress, which would feel snappier.\r\n     *\r\n     * However, if there's a delay (main thread work) between the creation of\r\n     * the animation and the first commited frame, we prefer to use resolvedAt\r\n     * to avoid a sudden jump into the animation.\r\n     */\r\n    calcStartTime() {\r\n        if (!this.resolvedAt)\r\n            return this.createdAt;\r\n        return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY\r\n            ? this.resolvedAt\r\n            : this.createdAt;\r\n    }\r\n    /**\r\n     * A getter for resolved data. If keyframes are not yet resolved, accessing\r\n     * this.resolved will synchronously flush all pending keyframe resolvers.\r\n     * This is a deoptimisation, but at its worst still batches read/writes.\r\n     */\r\n    get resolved() {\r\n        if (!this._resolved && !this.hasAttemptedResolve) {\r\n            flushKeyframeResolvers();\r\n        }\r\n        return this._resolved;\r\n    }\r\n    /**\r\n     * A method to be called when the keyframes resolver completes. This method\r\n     * will check if its possible to run the animation and, if not, skip it.\r\n     * Otherwise, it will call initPlayback on the implementing class.\r\n     */\r\n    onKeyframesResolved(keyframes, finalKeyframe) {\r\n        this.resolvedAt = time.now();\r\n        this.hasAttemptedResolve = true;\r\n        const { name, type, velocity, delay, onComplete, onUpdate, isGenerator, } = this.options;\r\n        /**\r\n         * If we can't animate this value with the resolved keyframes\r\n         * then we should complete it immediately.\r\n         */\r\n        if (!isGenerator && !canAnimate(keyframes, name, type, velocity)) {\r\n            // Finish immediately\r\n            if (instantAnimationState.current || !delay) {\r\n                onUpdate &&\r\n                    onUpdate(getFinalKeyframe(keyframes, this.options, finalKeyframe));\r\n                onComplete && onComplete();\r\n                this.resolveFinishedPromise();\r\n                return;\r\n            }\r\n            // Finish after a delay\r\n            else {\r\n                this.options.duration = 0;\r\n            }\r\n        }\r\n        const resolvedAnimation = this.initPlayback(keyframes, finalKeyframe);\r\n        if (resolvedAnimation === false)\r\n            return;\r\n        this._resolved = {\r\n            keyframes,\r\n            finalKeyframe,\r\n            ...resolvedAnimation,\r\n        };\r\n        this.onPostResolved();\r\n    }\r\n    onPostResolved() { }\r\n    /**\r\n     * Allows the returned animation to be awaited or promise-chained. Currently\r\n     * resolves when the animation finishes at all but in a future update could/should\r\n     * reject if its cancels.\r\n     */\r\n    then(resolve, reject) {\r\n        return this.currentFinishedPromise.then(resolve, reject);\r\n    }\r\n    flatten() {\r\n        this.options.type = \"keyframes\";\r\n        this.options.ease = \"linear\";\r\n    }\r\n    updateFinishedPromise() {\r\n        this.currentFinishedPromise = new Promise((resolve) => {\r\n            this.resolveFinishedPromise = resolve;\r\n        });\r\n    }\r\n}\r\n\r\nexport { BaseAnimation };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}