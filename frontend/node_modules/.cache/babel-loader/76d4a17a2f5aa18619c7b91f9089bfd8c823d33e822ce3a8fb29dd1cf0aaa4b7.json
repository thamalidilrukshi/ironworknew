{"ast":null,"code":"import _objectSpread from \"C:/xampp/htdocs/iron iron/iron_work/simply-clone/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/xampp/htdocs/iron iron/iron_work/simply-clone/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nconst _excluded = [\"transitionEnd\", \"transition\"];\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\r\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\r\n * it doesn't exist.\r\n */\nfunction setMotionValue(visualElement, key, value) {\n  if (visualElement.hasValue(key)) {\n    visualElement.getValue(key).set(value);\n  } else {\n    visualElement.addValue(key, motionValue(value));\n  }\n}\nfunction setTarget(visualElement, definition) {\n  const resolved = resolveVariant(visualElement, definition);\n  let _ref = resolved || {},\n    {\n      transitionEnd = {},\n      transition = {}\n    } = _ref,\n    target = _objectWithoutProperties(_ref, _excluded);\n  target = _objectSpread(_objectSpread({}, target), transitionEnd);\n  for (const key in target) {\n    const value = resolveFinalValueInKeyframes(target[key]);\n    setMotionValue(visualElement, key, value);\n  }\n}\nexport { setTarget };","map":{"version":3,"names":["resolveFinalValueInKeyframes","motionValue","resolveVariant","setMotionValue","visualElement","key","value","hasValue","getValue","set","addValue","setTarget","definition","resolved","_ref","transitionEnd","transition","target","_objectWithoutProperties","_excluded","_objectSpread"],"sources":["C:/xampp/htdocs/iron iron/iron_work/simply-clone/frontend/node_modules/framer-motion/dist/es/render/utils/setters.mjs"],"sourcesContent":["import { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\r\nimport { motionValue } from '../../value/index.mjs';\r\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\r\n\r\n/**\r\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\r\n * it doesn't exist.\r\n */\r\nfunction setMotionValue(visualElement, key, value) {\r\n    if (visualElement.hasValue(key)) {\r\n        visualElement.getValue(key).set(value);\r\n    }\r\n    else {\r\n        visualElement.addValue(key, motionValue(value));\r\n    }\r\n}\r\nfunction setTarget(visualElement, definition) {\r\n    const resolved = resolveVariant(visualElement, definition);\r\n    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};\r\n    target = { ...target, ...transitionEnd };\r\n    for (const key in target) {\r\n        const value = resolveFinalValueInKeyframes(target[key]);\r\n        setMotionValue(visualElement, key, value);\r\n    }\r\n}\r\n\r\nexport { setTarget };\r\n"],"mappings":";;;AAAA,SAASA,4BAA4B,QAAQ,+BAA+B;AAC5E,SAASC,WAAW,QAAQ,uBAAuB;AACnD,SAASC,cAAc,QAAQ,gCAAgC;;AAE/D;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,aAAa,EAAEC,GAAG,EAAEC,KAAK,EAAE;EAC/C,IAAIF,aAAa,CAACG,QAAQ,CAACF,GAAG,CAAC,EAAE;IAC7BD,aAAa,CAACI,QAAQ,CAACH,GAAG,CAAC,CAACI,GAAG,CAACH,KAAK,CAAC;EAC1C,CAAC,MACI;IACDF,aAAa,CAACM,QAAQ,CAACL,GAAG,EAAEJ,WAAW,CAACK,KAAK,CAAC,CAAC;EACnD;AACJ;AACA,SAASK,SAASA,CAACP,aAAa,EAAEQ,UAAU,EAAE;EAC1C,MAAMC,QAAQ,GAAGX,cAAc,CAACE,aAAa,EAAEQ,UAAU,CAAC;EAC1D,IAAAE,IAAA,GAAyDD,QAAQ,IAAI,CAAC,CAAC;IAAnE;MAAEE,aAAa,GAAG,CAAC,CAAC;MAAEC,UAAU,GAAG,CAAC;IAAa,CAAC,GAAAF,IAAA;IAARG,MAAM,GAAAC,wBAAA,CAAAJ,IAAA,EAAAK,SAAA;EACpDF,MAAM,GAAAG,aAAA,CAAAA,aAAA,KAAQH,MAAM,GAAKF,aAAa,CAAE;EACxC,KAAK,MAAMV,GAAG,IAAIY,MAAM,EAAE;IACtB,MAAMX,KAAK,GAAGN,4BAA4B,CAACiB,MAAM,CAACZ,GAAG,CAAC,CAAC;IACvDF,cAAc,CAACC,aAAa,EAAEC,GAAG,EAAEC,KAAK,CAAC;EAC7C;AACJ;AAEA,SAASK,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}